substitutions:
  name: "keypad-esp32-oled"
  mqtt_broker: 192.168.1.137

esphome:
  name: "${name}"
  platform: ESP32
  board: lolin32
  on_boot: 
    priority: 100
    then:
      - script.execute: oled_turnon_script

logger:

mqtt:
  id: mqtt_api
  broker: "${mqtt_broker}"
  discovery: true
  discovery_retain: true
  username: !secret mqtt_username
  password: !secret mqtt_password
  on_message:
     - topic: alarmo/event
       then:
         - lambda: |-
            ESP_LOGD("event", x.c_str());
     - topic: alarmo/state
       then:
         - lambda: |-
            ESP_LOGD("state", x.c_str());
            id(hassio_alarm_state) = x;
            id(oled_turnon_script).execute();

ota:
  password: "pqkAhahhygkam9xd2qzunmcvbz&ecadp"

wifi:
  id: wireless
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  # power_save_mode: none
  domain: .lan

i2c:
  scan: False

text_sensor: 
  - platform: version
    name: "ESPHome Version"

  # - platform: template
  #   name: "Pin code"
  #   id: pin_code
  #   icon: "mdi:dialpad"
  #   update_interval: never

  - platform: template
    name: "Pin code buff"
    id: pin_code_buff
    internal: True
    update_interval: never
    on_value:
      then:
        - if:
            condition:
              lambda: |-
                return id(pin_code_buff).state.size() > 0;
            then:
              - display.page.show: oled_page_pin_code_buff
              - component.update: oled
              - script.execute: oled_turnoff_timed_script
    filters:
      - lambda: |-
          auto current_pin = id(pin_code_buff).state;
          if (x == "\b") {
            if(current_pin.size() > 0)
            {
              current_pin = current_pin.substr(0, current_pin.size()-1);
            }
          } 
          else if (x == "\0x80") 
          {
            current_pin = {""};
          } 
          else 
          {
            current_pin = current_pin + x;
          }

          return current_pin;
  - platform: template
    name: "Wifi bar icon"
    id: wifi_bar_icon
    internal: True
    lambda: |-
      if(id(wireless).is_connected() == false)
        return {"\ueb31"}; // wifi connecting 
      else if(id(mqtt_api).is_connected() == false)
        return {"\ue16f"}; // api connecting
      else
        return id(wifi_bar_icon).state;
    filters:
      - substitute:
        - "wifi_sig_0 -> \uf0b0"
        - "wifi_sig_1 -> \uebe4"
        - "wifi_sig_2 -> \uebd6"
        - "wifi_sig_3 -> \uebe1"
        - "wifi_sig_4 -> \ue1d8"
        - "wifi_connecting -> \ueb31"
        - "wifi_disconnected -> \uf063"

sensor:
  - platform: wifi_signal # Reports the WiFi signal strength/RSSI in dB
    name: "WiFi Signal dB"
    id: wifi_signal_db
    # update_interval: 1s
    internal: True
    entity_category: "diagnostic"

  - platform: copy # Reports the WiFi signal strength in %
    source_id: wifi_signal_db
    name: "WiFi Signal Bars"
    filters:
      - lambda: |-
          if (x >= -30) {
            return 4;
          } else if (x >= -67) {
            return 3;
          } else if (x >= -70) {
            return 2;
          } else if (x >= -80) {
            return 1;
          } else {
            return 0;
          }
    unit_of_measurement: "bars"
    entity_category: "diagnostic"
    internal: True
    on_value:
      - lambda: |-
          id(wifi_bar_icon).publish_state("wifi_sig_" + to_string(int(x)));


script:
  - id: oled_turnoff_timed_script
    mode: restart     # Light will be kept on during 1 minute since
                      # the latest time the script is executed
    then:
      - delay: 10 s
      - lambda: |-
          id(oled_turnoff_script).execute();
  - id: oled_turnoff_script
    then:
      - lambda: |-
          id(oled_screen).turn_off().perform();
          id(script_clear_code).execute();
  - id: oled_turnon_script
    then:
      - lambda: |-
          id(oled_screen).turn_on().perform();
          id(oled).show_page(id(oled_page_idle));
          id(oled_turnoff_timed_script).execute();
  - id: oled_show_message_script
    then:
      - lambda: |-
          id(oled_screen).turn_on().perform();
          id(oled).show_page(id(oled_page_hassio_message));
          id(oled_turnoff_timed_script).execute();
  - id: script_send_disarm
    then:
      - mqtt.publish:
          topic: alarmo/command
          retain: false
          payload: !lambda |-
            return "{\"command\": \"DISARM\", \"code\": \"" + id(pin_code_buff).state + "\"}"; 
  - id: script_clear_code
    then:
      - lambda: |-
          id(pin_code_buff).publish_state("\0x80");
  - id: script_send_arm
    then:
      - mqtt.publish:
          topic: alarmo/command
          retain: false
          payload: !lambda |-
            return "{\"command\": \"ARM_AWAY\"}";
  - id: script_OK_btn_pressed
    then:
      - if:
          condition:
            display.is_displaying_page: oled_page_ask_arm
          then:
            - script.execute: script_send_arm
            - display.page.show: oled_page_idle
      - if:
          condition:
            display.is_displaying_page: oled_page_idle
          then:
            - if:
                condition:
                  lambda: 'return id(hassio_alarm_state) == std::string("disarmed");'
                then:
                  - display.page.show: oled_page_ask_arm     
      - if:
            condition:
              display.is_displaying_page: oled_page_off
            then:
              script.execute: oled_turnon_script
      - if:
          condition:
            display.is_displaying_page: oled_page_pin_code_buff
          then:
            - if: 
                condition: 
                  lambda: 'return id(pin_code_buff).state.length();'
                then:
                  - script.execute: script_send_disarm
                  - display.page.show: oled_page_idle

display:
  - platform: ssd1306_i2c
    model: "SSD1306 128x32"
    address: 0x3C
    id: oled
    pages: 
      - id: oled_page_idle
        lambda: |-
          //auto current_time = id(esptime).now();
          //it.printf(0, 0, id(font1), "%02d:%02d:%02d", current_time.hour, current_time.minute, current_time.second);
          it.printf(0,0, id(font1), "%s", id(hassio_alarm_state).c_str());
          it.print(it.get_width(), 0, id(icons), TextAlign::TOP_RIGHT, id(wifi_bar_icon).state.c_str());
      - id: oled_page_pin_code_buff
        lambda: |-
          it.printf(0, 0, id(font1), "Pin: %s", id(pin_code_buff).state.c_str());
      - id: oled_page_hassio_message
        lambda: |-
          it.printf(0, 0, id(font1), id(hassio_oled_message).c_str());
      - id: oled_page_ask_arm
        lambda: |-
          it.printf(0, 0, id(font1), "Arm?");
      - id: oled_page_off
        lambda: |-
          id(script_clear_code).execute();
          it.fill(COLOR_OFF);
    on_page_change:
        then:
          - component.update: oled
          - script.execute: oled_turnoff_timed_script

ttp229_bsf:
  sdo_pin: 16
  scl_pin: 17

binary_sensor:
  - platform: ttp229_bsf
    name: TKey0
    channel: 0
    internal: True
    on_press: 
      then:
        - lambda: |-
            id(pin_code_buff).publish_state("1");
  - platform: ttp229_bsf
    name: TKey1
    channel: 1

    internal: True
    on_press: 
      then:
        - lambda: |-
            id(pin_code_buff).publish_state("2");
  - platform: ttp229_bsf
    name: TKey2
    channel: 2
    internal: True
    on_press: 
      then:
        - lambda: |-
            id(pin_code_buff).publish_state("3");
  - platform: ttp229_bsf
    name: TKey4
    channel: 4
    internal: True
    on_press: 
      then:
        - lambda: |-
            id(pin_code_buff).publish_state("4");
  - platform: ttp229_bsf
    name: TKey5
    channel: 5
    internal: True
    on_press: 
      then:
        - lambda: |-
            id(pin_code_buff).publish_state("5");
  - platform: ttp229_bsf
    name: TKey6
    channel: 6
    internal: True
    on_press: 
      then:
        - lambda: |-
            id(pin_code_buff).publish_state("6");
  - platform: ttp229_bsf
    name: TKey8
    channel: 8
    internal: True
    on_press: 
      then:
        - lambda: |-
            id(pin_code_buff).publish_state("7");
  - platform: ttp229_bsf
    name: TKey9
    channel: 9
    internal: True
    on_press: 
      then:
        - lambda: |-
            id(pin_code_buff).publish_state("8");
  - platform: ttp229_bsf
    name: TKey10
    channel: 10
    internal: True
    on_press: 
      then:
        - lambda: |-
            id(pin_code_buff).publish_state("9");
  - platform: ttp229_bsf
    name: TKey13
    channel: 13
    internal: True
    on_press: 
      then:
        - lambda: |-
            id(pin_code_buff).publish_state("0");
  
  - platform: ttp229_bsf
    name: TKeyBackspace
    channel: 3
    internal: True
    on_press: 
      then:
        - lambda: |-
            id(pin_code_buff).publish_state("\b");
  - platform: ttp229_bsf
    name: TKeyClear
    channel: 7
    internal: True
    on_press: 
      then:
        - script.execute: script_clear_code
        - display.page.show: oled_page_idle
  - platform: ttp229_bsf
    name: TKeyOK
    channel: 15
    internal: True
    on_press: 
      then:
        - script.execute: script_OK_btn_pressed

light:
  - platform: binary
    icon: "mdi:cellphone-screenshot"
    name: "Screen"
    output: oled_output
    id: oled_screen

output:
    - platform: template
      id: oled_output
      type: binary
      write_action:
        - if:
            condition: 
              lambda: return state;
            then:
              - if:
                  condition:
                    display.is_displaying_page: oled_page_off
                  then:
                    - display.page.show: oled_page_idle
            else:
              - display.page.show: oled_page_off

## Resources
font:
  - file: 'gfonts://Roboto'
    id: font1
    size: 24
    glyphs: "!\"%()+=,-_.:Â°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz?/"
  - file: 'gfonts://Material Symbols Outlined'
    id: icons
    size: 24
    glyphs: [
      "\uf0b0", # wifi 0 bars
      "\uebe4", # wifi 1 bars
      "\uebd6", # wifi 2 bars
      "\uebe1", # wifi 3 bars
      "\ue1d8", # wifi 4 bars
      "\uf063", # wifi bad
      "\ueb31", # wifi connecting 
      "\ue16f", # api connecting
      ]

globals:
  - id: hassio_oled_message
    type: std::string
    restore_value: no
  - id: hassio_alarm_state
    type: std::string
    restore_value: no
    initial_value: '"N/A"'